package com.base.class_;

import java.io.File;
import java.io.IOException;
import java.time.Duration;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.devtools.v101.css.CSS.TakeCoverageDeltaResponse;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.interactions.Action;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;

public class Utility_Files {
		public static WebDriver driver;
	public static WebDriver browser_Launch(String browser) {
		if (browser.equalsIgnoreCase("chrome")) {
			System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir")+"\\Driver\\chromedriver.exe");
			driver= new ChromeDriver();
		}
		else if (browser.equalsIgnoreCase("edge")) {
			System.setProperty("webdriver.edge.driver", System.getProperty("user.dir")+"\\Driver\\Driver\\msedgedriver.exe");
			driver = new EdgeDriver();
		}
		driver.manage().window().maximize();
		return driver;	
	    }
	public static void impliWait (int sec) {
		 driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(sec));
		}
	public static void pageLoadWait(int sec) {
		driver.manage().timeouts().pageLoadTimeout(Duration.ofSeconds(sec));
	    }
	public static  void getUrl(String url) {
			driver.get(url);
		}
	public static void close_() {
		driver.close();
	    }
	public static void quit_() {
		driver.quit();
		}
	public static WebElement findEleByXpath (String xpath) {
		WebElement element = driver.findElement(By.xpath(xpath));
		return element;
		}
	public static List<WebElement> findElementsByXpath(String xpath) {
		List<WebElement> elements = driver.findElements(By.xpath(xpath));
		return elements;
	    }
	public static void click_(WebElement e) {
		e.click();	
	    }
	public static void send_Keys(WebElement e,String key) {
		e.sendKeys(key);	
	    }
	public static void clear_(WebElement e) {
		e.clear();	
	    }
	public void nav_To(String url) {
		driver.navigate().to(url);
		}
	public static void nav_Ref() {
		driver.navigate().refresh();
		}
	public static void nav_Forward() {
		driver.navigate().forward();
		}
	public static void nav_Back() {
		driver.navigate().back();
		}
	public static String get_Title() {
		String title = driver.getTitle();
		return title;	
		}
	public static String get_CurrentURL() {
		String url = driver.getCurrentUrl();
		return url;
		}
	public static Select select(String xpath) {
		 Select s = new Select(findEleByXpath(xpath));
		return s;
	    }
	public static void selectByText(Select s,String text) {
		s.selectByVisibleText(text);
	    }
	public static void selectByValue(Select s,String value) {
		s.selectByValue(value);
	    }
	
	public static void source_Destination_Copy(TakesScreenshot t,String destination) throws IOException {
		File source = t.getScreenshotAs(OutputType.FILE);
		File des = new File(destination);
		FileUtils.copyFile(source, des);
	    }
	public static void threadSleep(int milli) throws InterruptedException {
		Thread.sleep(milli);
	    }
	
	public static void moveToEle(Actions a ,WebElement element) {
	a.moveToElement(element).build().perform();	
	   }
	
	public static void click_AndHold(Actions a,WebElement element) {
		a.clickAndHold(element).build().perform();
	   }
	public static void rel(Actions a) {
		a.release().build().perform();
	   }
    public static List<WebElement> findElementsByTagName(String tagName) {
        List<WebElement> elements_ = driver.findElements(By.tagName(tagName));
    	return elements_;
       }
    public static void switchToFrameByEle(WebElement frameElement) {
		driver.switchTo().frame(frameElement);
	   }
	public static void switch_ToDefaultContent () {
		driver.switchTo().defaultContent();
	  }
	
	public static void jsScrollIntoView(JavascriptExecutor j,WebElement element) {
		j = (JavascriptExecutor) driver;
		j.executeScript("arguments[0].scrollIntoView();", element);

	}
	
	
	
	
	
	}



